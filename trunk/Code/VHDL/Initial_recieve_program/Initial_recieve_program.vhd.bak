library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;



entity initial_recieve_program is
  port (
------------Debugging---------
    START_o   : out std_logic_vector(7 downto 0);
    ADDR_o    : out std_logic_vector(7 downto 0);
------------inputs------------
		CLK	    : in std_logic;
		RESET	  : in std_logic;
		DATA	   : in std_logic;
------------Outputs-----------
		LEDS	   : out std_logic_vector(3 downto 0)
    );
end entity initial_recieve_program;


architecture rtl of initial_recieve_program is
  type state_type is (idle, address_check, get_data);
  signal r1,r2,r3,r4 	: std_logic;
  signal s1,s2,s3,s4,s5,s6,s7,s8 : std_logic;
  signal b1,b2				: std_logic;
  signal reveived_bit	: std_logic;
  signal Manchester_r	: std_logic_vector(1 downto 0);
  signal start				: std_logic_vector(7 downto 0);
  signal address 			: std_logic_vector(3 downto 0);
  signal fc 				: std_logic_vector(3 downto 0);
  signal state 			: state_type;
begin
START_o <= start;
ADDR_o  <= address;    
	 process(CLK,RESET)
	 variable data_count : integer range 0 to 3;
	 variable bit_count	: std_logic;
		begin
			if RESET = '1' then
			end if;
			if rising_edge(CLK) then
			
			case state is
				when idle => -- wait for start sequence
					s8 <= s7;
					s7 <= s6;
					s6 <= s5;
					s5 <= s4;
					s4 <= s3;
					s3 <= s2;
					s2 <= s1;
					s1 <= DATA;
					start <= s8 & s7 & s6 & s5 & s4 & s3 & s2 & s1;
					if start = "01101001" then
						state <= address_check;
						bit_count := '0';
					end if;
					
				when address_check => -- Are you talkin' to me?!
					if bit_count = '0' then	
						b1 <= DATA;
						bit_count := '1';
					elsif bit_count = '1' then
						b2 <= DATA;
						Manchester_r <= b1 & b2;
						if Manchester_r = "01" then
							r1 <= '0';
						else
							r1 <= '1';
						end if;
						r4 <= r3;
						r3 <= r2;
						r2 <= r1;
						address <= r4 & r3 & r2 & r1;
						if address = "0001" then
							state <= get_data;
							data_count := 0;
						end if;
						bit_count := '0';
					end if;
				
				when get_data =>
					LEDS <= address;
					state <= idle;
				
			end case;
			
			end if;
	 end process;
end architecture;

-- END OF FILE --